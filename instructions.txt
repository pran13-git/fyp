Training the classifier

Init_benign.sh 
	◦	SplitTrainTest
Main_clean_classifier
	◦	Make use of ctrlGenModel class
	◦	Make use of configCleanClassifier.py config file

What you need to do: Choose best checkpoints from [clean_model_dir] and accordingly edit checkpoint path in the files:
config_trojan_classifier.py, config_defender.py, config.evaluation.py

Testing the classifier


MainCleanClassifier

MainCleanClassifier again

What you need to do: Check the accuracy and attack success rate in
[clean_model_dir]/data/acc.txt and [clean_model_dir]/data/asr.txt

Training T-Miner defender model

MainCleanClassifier

MainCleanClassifier again

helperRandomPosNeg.py

MainCleanClassifier

MainCleanClassifier

MainDefender.py
	◦	Make use of ctrlGenModel object from ctrlGenModelDefense
	◦	Make use of configDefender.sh config file

Running perturbation generator

MainEvaluation.py

helper_evaluations_3columns.py

helper_random_pos_neg

main_clean_classifier.py
x 3

Running Trojan identifier:

script_internal_layer.py

main_defender_internal_layers.py


Trojan classifier

Training classifier:

trojan_classifier_train.sh ->

init_trigger.sh

word_poisoner.py

main_trojan_classifier.py
	◦	CtrlGenModel
	◦	Use config file configTrojanClassifier

What you need to do: Choose best checkpoints from [trojan_dir] and accordingly edit checkpoint path in the files:
config_trojan_classifier.py, config_defender.py, config.evaluation.py

Testing classifier:

trojan_classifier_test.sh ->

 main_trojan_classifier.py

 main_trojan_classifier.py

word_poisoner.py

 main_trojan_classifier.py


Training T-Miner defender model:

trojan_defender_train.sh ->

main_trojan_classifier.py

main_trojan_classifier.py

main_trojan_classifier.py

helper_random_pos_neg.py

main_trojan_classifier.py

main_trojan_classifier.py

MainDefender.py
	◦	Make use of ctrlGenModel object from ctrlGenModelDefense
	◦	Make use of configDefender.sh config file

Running perturbation generator:

trojan_evaluation.sh ->

python helper_candidates_smart.py

python helper_evaluations_3columns.py

helper_random_pos_neg.py

main_trojan_classifier.py
x3

Running Trojan identifier:

trojan_clustering.sh ->

script_internal_layer.py

main_defender_internal_layers.py

script_internal_layer.py get-outliers